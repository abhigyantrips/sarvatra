generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  projectDatabaseType = "PostgreSQL"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String? @unique
  phoneNo   String? @unique
  aadharNo  String? @unique
  panNo     String? @unique
  icNo      String  @unique
  rank      String?
  firstName String  @db.VarChar(255)
  lastName  String? @db.VarChar(255)
  role      Role    @default(STUDENT)
  password  String

  // Relation fields
  courses     CourseEnrollment[]
  testResults Result[]           @relation(name: "results")
  testsGraded Result[]           @relation(name: "graded")
  tokens      Token[]
}

model Token {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  valid      Boolean  @default(true)
  expiration DateTime

  // Relation fields
  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Course {
  id         Int    @id @default(autoincrement())
  courseCode String @unique
  name       String
  semesters  Int
  credits    Int
  // total = 40 * credits
  total      Int

  // Relation fields
  members  CourseEnrollment[]
  subjects Subject[]

  @@index([courseCode])
}

model Subject {
  id          Int    @id @default(autoincrement())
  subjectCode String @unique
  semester    Int

  // Relation Fields
  courseId Int
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Result   Result[]

  @@index([subjectCode])
}

model CourseEnrollment {
  createdAt DateTime @default(now())
  role      Role

  // Relation fields
  userId   Int
  courseId Int
  User     User   @relation(fields: [userId], references: [id])
  Course   Course @relation(fields: [courseId], references: [id])

  @@id([userId, courseId])
}

model Result {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PH1          Int?
  PH2          Int?
  assignment   Int?
  IA           Int?
  finals       Int?
  overall      Int?
  letterGrade  LetterGrade
  digitalGrade Int?
  CixGi        Int?

  // Relation fields
  subjectId Int
  studentId Int
  graderId  Int?
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  student   User    @relation(name: "results", fields: [studentId], references: [id], onDelete: Cascade)
  gradedBy  User?   @relation(name: "graded", fields: [graderId], references: [id], onDelete: SetNull)
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum LetterGrade {
  AP
  AO
  AM
  BP
  BO
  BM
  CP
  CO
  CM
  F
}
